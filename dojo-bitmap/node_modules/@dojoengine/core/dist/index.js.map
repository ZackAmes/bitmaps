{"version":3,"sources":["../src/provider/DojoProvider.ts","../src/provider/provider.ts","../src/types/index.ts","../src/constants/index.ts","../src/utils/index.ts"],"sourcesContent":["import {\n    RpcProvider,\n    Account,\n    InvokeFunctionResponse,\n    Contract,\n    shortString,\n    InvocationsDetails,\n    AllowArray,\n    Call,\n    num,\n    CallContractResponse,\n} from \"starknet\";\nimport { Provider } from \"./provider\";\nimport { WorldEntryPoints } from \"../types\";\nimport { LOCAL_KATANA } from \"../constants\";\nimport { getContractByName } from \"../utils\";\n\n/**\n * DojoProvider: The DojoProvider is an execution provider for dojo worlds. It allows you to easily interact with a dojo world via the Starknet.js library.\n * ```ts\n * import { DojoProvider } from \"@dojoengine/core\";\n *\n * const provider = new DojoProvider(\n *      manifest\n * );\n *\n * await provider.execute(signer, contract, system, call_data);\n * ```\n */\nexport class DojoProvider extends Provider {\n    public provider: RpcProvider;\n    public contract: Contract;\n    public manifest: any;\n\n    /**\n     * Constructor: Initializes the DojoProvider with the given world address, manifest and URL.\n     *\n     * @param {string} world_address - Address of the world.\n     * @param {string} [url=LOCAL_KATANA] - RPC URL (defaults to LOCAL_KATANA).\n     */\n    constructor(manifest?: any, url: string = LOCAL_KATANA) {\n        super(manifest.world.address);\n        this.provider = new RpcProvider({\n            nodeUrl: url,\n        });\n\n        this.contract = new Contract(\n            manifest.world.abi,\n            this.getWorldAddress(),\n            this.provider\n        );\n        this.manifest = manifest;\n    }\n\n    /**\n     * Retrieves a single entity's details.\n     *\n     * @param {string} model - The component to query.\n     * @param {Array<string>} keys - The keys to query.\n     * @param {number} [offset=0] - Starting offset (defaults to 0).\n     * @param {number} [length=0] - Length to retrieve (defaults to 0).\n     * @returns {Promise<Array<bigint>>} - A promise that resolves to an array of bigints representing the entity's details.\n     */\n    public async entity(\n        model: string,\n        keys: Array<string>,\n        offset: number = 0,\n        length: number = 0,\n        layout: Array<number>\n    ): Promise<Array<bigint>> {\n        try {\n            return (await this.contract.call(WorldEntryPoints.get, [\n                shortString.encodeShortString(model),\n                keys.length,\n                ...(keys as any),\n                offset,\n                length,\n                layout.length,\n                layout,\n            ])) as unknown as Array<bigint>;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Retrieves multiple entities' details.\n     *\n     * @param {string} model - The component to query.\n     * @param {number} index - The index to query.\n     * @param {Array<string>} values - The values to query.\n     * @param {number} valuesLength - The values length to query.\n     * @param {Array<number>} valuesLayout - The values layout to query.\n     */\n    public async entities(\n        model: string,\n        index: string,\n        values: Array<string>,\n        valuesLength: number,\n        valuesLayout: Array<number>\n    ): Promise<Array<Array<bigint>>> {\n        try {\n            return (await this.contract.call(WorldEntryPoints.entities, [\n                shortString.encodeShortString(model),\n                index,\n                values,\n                valuesLength,\n                valuesLayout,\n            ])) as unknown as Promise<Array<Array<bigint>>>;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Retrieves a models\n     *\n     * @param {string} name - Name of the model.\n     * @returns {Promise<bigint>} - A promise that resolves to a bigint representing the model's details.\n     */\n    public async model(name: string): Promise<bigint> {\n        try {\n            return (await this.contract.call(WorldEntryPoints.model, [\n                shortString.encodeShortString(name),\n            ])) as unknown as bigint;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Executes a function with the given parameters.\n     * This function is a wrapper around the Starknet.js Account.execute function, but is more convenient to use.\n     *\n     * ```ts\n     * await provider.execute(signer, contract, system, call_data);\n     * ```\n     * @param {Account} account - The account to use.\n     * @param {string} contract - The contract to execute.\n     * @param {string} call - The function to call.\n     * @param {num.BigNumberish[]} call_data - The call data for the function.\n     * @param {InvocationsDetails | undefined} transactionDetails - The transactionDetails allow to override maxFee & version\n     * @returns {Promise<InvokeFunctionResponse>} - A promise that resolves to the response of the function execution.\n     */\n    public async execute(\n        account: Account,\n        contract_name: string,\n        call: string,\n        calldata: num.BigNumberish[],\n        transactionDetails?: InvocationsDetails | undefined\n    ): Promise<InvokeFunctionResponse> {\n        try {\n            const nonce = await account?.getNonce();\n\n            return await account?.execute(\n                {\n                    contractAddress: getContractByName(\n                        this.manifest,\n                        contract_name\n                    ),\n                    entrypoint: call,\n                    calldata: calldata,\n                },\n                undefined,\n                {\n                    maxFee: 0, // TODO: Update this value as needed.\n                    ...transactionDetails,\n                    nonce,\n                }\n            );\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Executes a multicall.\n     * This function is a wrapper around the Starknet.js Account.execute function, but allows for executing multiple calls at once.\n     *\n     * ```ts\n     * await provider.executeMulti(account, calls);\n     * ```\n     * @param {Account} account - The account to use.\n     * @param {AllowArray<Call>} calls - The calls to execute.\n     * @param {InvocationsDetails | undefined} transactionDetails - The transactionDetails allow to override maxFee & version\n     * @returns {Promise<InvokeFunctionResponse>} - A promise that resolves to the response of the function execution.\n     */\n    public async executeMulti(\n        account: Account,\n        calls: AllowArray<Call>,\n        transactionDetails?: InvocationsDetails | undefined\n    ): Promise<InvokeFunctionResponse> {\n        try {\n            const nonce = await account?.getNonce();\n\n            return await account?.execute(calls, undefined, {\n                maxFee: 0, // TODO: Update this value as needed.\n                ...transactionDetails,\n                nonce,\n            });\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Retrieves current uuid from the world contract.\n     *\n     * @returns {Promise<number>} - A promise that resolves to the world uuid\n     * @throws {Error} - Throws an error if the call fails.\n     *\n     * @example\n     * const uuid = await provider.uuid();\n     * console.log(uuid);\n     * // => 6\n     *\n     */\n    public async uuid(): Promise<number> {\n        try {\n            const { result } = await this.provider.callContract({\n                contractAddress: this.getWorldAddress(),\n                entrypoint: WorldEntryPoints.uuid,\n                calldata: [],\n            });\n            if (result && result.length === 1) {\n                return parseInt(result[0]);\n            }\n            throw new Error(\"Contract did not return expected uuid\");\n        } catch (error) {\n            throw new Error(`Failed to fetch uuid: ${error}`);\n        }\n    }\n    /**\n     * Calls a function with the given parameters.\n     *\n     * @param {string} contract - The contract to call.\n     * @param {string} call - The function to call.\n     * @returns {Promise<CallContractResponse>} - A promise that resolves to the response of the function call.\n     */\n    public async call(\n        contract_name: string,\n        call: string,\n        calldata?: num.BigNumberish[]\n    ): Promise<CallContractResponse> {\n        try {\n            return await this.provider.callContract({\n                contractAddress: getContractByName(\n                    this.manifest,\n                    contract_name\n                ),\n                entrypoint: call,\n                calldata,\n            });\n        } catch (error) {\n            throw new Error(`Failed to call: ${error}`);\n        }\n    }\n}\n","import { IWorld } from \"../types\";\n\n/**\n * Provider class: An abstract base class for all providers.\n * It implements the ICommands interface, ensuring that any class deriving from Provider\n * will have implementations for the entity and entities methods.\n */\nexport abstract class Provider implements IWorld {\n    // Store the address of the world.\n    private readonly worldAddress: string;\n\n    /**\n     * Constructor: Initializes the Provider with a given world address.\n     *\n     * @param {string} worldAddress - The address of the world.\n     */\n    constructor(worldAddress: string) {\n        this.worldAddress = worldAddress;\n    }\n\n    /**\n     * Abstract method to retrieve a single entity's details.\n     * Classes extending Provider should provide a concrete implementation for this method.\n     *\n     * @param {string} component - The component to query.\n     * @param {Query} query - The query details.\n     * @param {number} offset - Starting offset.\n     * @param {number} length - Length to retrieve.\n     * @returns {Promise<Array<bigint>>} - A promise that resolves to an array of bigints representing the entity's details.\n     */\n    public abstract entity(\n        model: string,\n        keys: Array<string>,\n        offset: number,\n        length: number,\n        layout: Array<number>\n    ): Promise<Array<bigint>>;\n\n    /**\n     * Abstract method to retrieve multiple entities' details.\n     * Classes extending Provider should provide a concrete implementation for this method.\n     *\n     * @param {string} component - The component to query.\n     * @param {number} length - Number of entities to retrieve.\n     * @returns {Promise<Array<bigint>>} - A promise that resolves to an array of bigints representing the entities' details.\n     */\n    public abstract entities(\n        model: string,\n        index: string | null,\n        values: Array<string>,\n        valuesLength: number,\n        valuesLayout: Array<number>\n    ): Promise<Array<Array<bigint>>>;\n\n    /**\n     * Retrieves the stored world address.\n     *\n     * @returns {string} - The address of the world.\n     */\n    public getWorldAddress(): string {\n        return this.worldAddress;\n    }\n}\n","/**\n * Enumeration representing various entry points or functions available in the World.\n */\nexport enum WorldEntryPoints {\n    get = \"entity\", // Retrieve a single entity\n    set = \"set_entity\", // Set or update a single entity\n    entities = \"entities\", // Retrieve multiple entities\n    execute = \"execute\", // Execute a specific command\n    registerSystem = \"register_system\", // Register a new system\n    registerComponent = \"register_model\", // Register a new component\n    model = \"model\", // Access a component\n    system = \"system\", // Access a system\n    metadataUri = \"metadata_uri\", // Retrieve metadata URI for a resource\n    setMetadataUri = \"set_metadata_uri\", // Set metadata URI for a resource\n    registerModel = \"register_model\", // Register a new model\n    deployContract = \"deploy_contract\", // Deploy a contract and return its address\n    upgradeContract = \"upgrade_contract\", // Upgrade a contract\n    uuid = \"uuid\", // Retrieve the UUID of the world\n    emit = \"emit\", // Emit an event\n    entityIds = \"entity_ids\", // Retrieve entity IDs for a model\n    setExecutor = \"set_executor\", // Set executor for the world\n    executor = \"executor\", // Retrieve the executor's address\n    base = \"base\", // Retrieve base class hash\n    deleteEntity = \"delete_entity\", // Delete an entity\n    isOwner = \"is_owner\", // Check if an address is an owner of a resource\n    grantOwner = \"grant_owner\", // Grant ownership of a resource\n    revokeOwner = \"revoke_owner\", // Revoke ownership of a resource\n    isWriter = \"is_writer\", // Check if a system is a writer for a model\n    grantWriter = \"grant_writer\", // Grant writer permission\n    revokeWriter = \"revoke_writer\", // Revoke writer permission\n}\n\n/**\n * World interface: An interface that defines the methods that a world must implement.\n * Dojo v0.4.0\n */\n\nexport interface IWorld {\n    // Retrieve metadata URI for a resource\n    metadataUri?(resource: string): Promise<Array<string>>;\n\n    // Set metadata URI for a resource\n    setMetadataUri?(resource: string, uri: Array<string>): Promise<void>;\n\n    // Retrieve model class hash by name\n    model?(name: string): Promise<string>;\n\n    // Register a new model\n    registerModel?(classHash: string): Promise<void>;\n\n    // Deploy a contract and return its address\n    deployContract?(salt: string, classHash: string): Promise<string>;\n\n    // Upgrade a contract and return its new class hash\n    upgradeContract?(address: string, classHash: string): Promise<string>;\n\n    // Retrieve the UUID of the world\n    uuid?(): Promise<string>;\n\n    // Retrieve entity details\n    entity?(\n        model: string,\n        keys: Array<string>,\n        offset: number,\n        length: number,\n        layout: Array<number>\n    ): Promise<Array<bigint>>;\n\n    // Set entity details\n    setEntity?(\n        model: string,\n        keys: Array<string>,\n        offset: number,\n        values: Array<string>,\n        layout: Array<number>\n    ): Promise<void>;\n\n    // Retrieve multiple entities' details\n    entities?(\n        model: string,\n        index: string | null,\n        values: Array<string>,\n        valuesLength: number,\n        valuesLayout: Array<number>\n    ): Promise<Array<Array<bigint>>>;\n\n    // Retrieve entity IDs for a model\n    entityIds?(model: string): Promise<Array<string>>;\n\n    // Set executor for the world\n    setExecutor?(contractAddress: string): Promise<void>;\n\n    // Retrieve the executor's address\n    executor?(): Promise<string>;\n\n    // Retrieve base class hash\n    base?(): Promise<string>;\n\n    // Delete an entity\n    deleteEntity?(\n        model: string,\n        keys: Array<string>,\n        layout: Array<number>\n    ): Promise<void>;\n\n    // Check if an address is an owner of a resource\n    isOwner?(address: string, resource: string): Promise<boolean>;\n\n    // Grant ownership of a resource to an address\n    grantOwner?(address: string, resource: string): Promise<void>;\n\n    // Revoke ownership of a resource from an address\n    revokeOwner?(address: string, resource: string): Promise<void>;\n\n    // Check if a system is a writer for a model\n    isWriter?(model: string, system: string): Promise<boolean>;\n\n    // Grant writer permission to a system for a model\n    grantWriter?(model: string, system: string): Promise<void>;\n\n    // Revoke writer permission from a system for a model\n    revokeWriter?(model: string, system: string): Promise<void>;\n\n    // Get the age or duration since the World was created\n    worldAge?(): Promise<bigint>;\n}\n","export const LOCAL_KATANA = \"http://127.0.0.1:5050\";\nexport const LOCAL_TORII = \"http://localhost:8080\";\n","/**\n * Gets a contract from a manifest by name.\n *\n * @param {any} manifest - The manifest object.\n * @param {string} name - The name of the contract.\n * @returns {any} The contract object.\n *\n */\nexport const getContractByName = (manifest: any, name: string) => {\n    return (\n        manifest.contracts.find((contract: any) => {\n            const nameParts = contract.name.split(\"::\");\n            // Check if the last part matches or if the full name matches\n            return (\n                nameParts[nameParts.length - 1] === name ||\n                contract.name === name\n            );\n        })?.address || \"\"\n    );\n};\n\n/**\n * Parses a model name into a class name.\n *\n * @param {any} model - The model object.\n * @returns {string} The class name.\n *\n */\nexport const parseModelName = (model: any) => {\n    // Define a set of known acronyms\n    const acronyms = new Set([\"ERC\"]);\n\n    return model.name\n        .split(\"::\")\n        .pop()\n        .split(\"_\")\n        .map((part: string) => {\n            // If the part is a known acronym, keep it in uppercase\n            if (acronyms.has(part.toUpperCase())) {\n                return part.toUpperCase();\n            }\n            // If the part is fully numeric, keep it as is\n            if (!isNaN(parseInt(part))) {\n                return part;\n            }\n            // Capitalize the first letter and make the rest lowercase\n            return part.charAt(0).toUpperCase() + part.slice(1).toLowerCase();\n        })\n        .join(\"\");\n};\n"],"mappings":"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","names":["WorldEntryPoints"]}